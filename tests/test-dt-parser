#!/bin/bash
set -eu -o pipefail

# Unit test for dt-parser.py.
# Usage: test-dt-parser [keep]
# We keep our temporary folder when `keep' is specified.

# Redirect all output to a log in current folder.
# Keep stdout on fd 3.
bn=$(basename "$0")
log="$bn.log"
exec 3>&1 >"$log" 2>&1
set -x

echo -n 'Testing dt parser... ' >&3
trap 'echo "ERROR! (see $log)" >&3' ERR

# Make sure dt-parser.py and validate.py are in the path.
me=$(realpath "$0")
here="${me%/*}"
export PATH="$here/..:$PATH"

# Temporary folder.
if [ "${1:-unset}" == keep ]; then
	tmp=$(mktemp -d "$(basename "$0").XXX")
else
	tmp=$(mktemp -d)
	trap 'rm -fr "$tmp"' EXIT
fi

data="$here/data/$(basename "$0")"
out="$tmp/out"
dt-parser.py "$data/qemu.log" |& tee "$out"
echo -n 'parse, ' >&3

unp=$(grep -c 'WARNING parse: Unparsed line' "$out")
((unp == 1))
echo -n 'one unparsed line, ' >&3

dt-parser.py --config /dev/null "$data/qemu.log"
echo -n 'null config, ' >&3

dt-parser.py --print "$data/qemu.log" |& tee "$out"
grep 'is not one of' "$out"
echo -n 'print, ' >&3

dt-parser.py "$data/parse-bug.log" |& tee "$out"

if grep 'WARNING .*: Unparsed line ' "$out"; then
	false
fi

echo -n 'parse bug, ' >&3

yaml="$tmp/dt.yaml"
dt-parser.py --yaml "$yaml" "$data/qemu.log"
echo -n 'yaml, ' >&3

validate.py --schema schemas/dt-parser-yaml-schema.yaml "$yaml"
echo -n 'valid, ' >&3

dt-parser.py --config "$data/test-config.yaml" "$data/qemu.log" |& tee "$out"
grep '12  dt-validate warning' "$out"
grep '13  dtc warning' "$out"
grep ' 2  ignored' "$out"
echo -n 'rule, ' >&3

dt-parser.py --config /dev/null \
	--filter "x['devicetree_node'] == '/pl031@x:clocks'" \
	"$data/qemu.log" |& tee "$out"
grep '1  dtc warning' "$out"
echo -n 'filter, ' >&3

dt-parser.py "$data/no-schema.log" |& tee "$out"
grep '1  error no schema' "$out"
echo -n 'no schema, ' >&3

dt-parser.py "$data/no-dedupe.log" |& tee "$out"
grep '1  dt-validate warning' "$out"

dt-parser.py --no-dedupe "$data/no-dedupe.log" |& tee "$out"
grep '2  dt-validate warning' "$out"
echo -n 'no dedupe, ' >&3

dt-parser.py --compatibles "$data/compat.txt" --print "$data/compat.log" |& tee "$out"
grep '^1  error no yaml schema' "$out"
grep '^1  error no schema' "$out"
grep 'error no schema .*legit,error' "$out"
grep 'error no yaml schema .*known,compatible' "$out"
echo -n 'compat, ' >&3

echo 'ok.' >&3
