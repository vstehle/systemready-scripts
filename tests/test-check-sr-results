#!/bin/bash
set -eu -o pipefail

# Unit test for check-sr-results.py.
# Usage: test-check-sr-results [keep]
# We keep our temporary folder when `keep' is specified.

# Redirect all output to a log in current folder.
# Keep stdout on fd 3.
bn=$(basename "$0")
log="$bn.log"
exec 3>&1 >"$log" 2>&1
set -x

echo -n 'Testing check-sr-results... ' >&3
trap 'echo "ERROR! (see $log)" >&3' ERR

# Make sure check-sr-results.py is in the path.
me=$(realpath "$0")
here="${me%/*}"
export PATH="$here/..:$PATH"

# Temporary folder.
if [ "${1:-unset}" == keep ]; then
	tmp=$(mktemp -d "$(basename "$0").XXX")
else
	tmp=$(mktemp -d)
	trap 'rm -fr "$tmp"' EXIT
fi

data="$here/data/$(basename "$0")"
out="$tmp/out"

echo -n 'none, ' >&3
check-sr-results.py

echo -n 'empty config, ' >&3
check-sr-results.py --config /dev/null

echo -n 'when any, ' >&3
identify="$here/../identify.py --identify-db $data/identify.yaml"

for d in a b; do
	check-sr-results.py --dir "$data/$d" --config "$data/when-any.yaml" \
		--identify "$identify" |& tee "$out"

	grep 'Identified as SystemReady IR v1.0' "$out"
	grep '0 warning, 0 error' "$out"
done

check-sr-results.py --dir "$data/ab" --config "$data/when-any.yaml" \
	--identify "$identify" |& tee "$out"

grep 'Identified as SystemReady IR v1.1' "$out"
grep '0 warning, 0 error' "$out"

echo -n 'when all, ' >&3
for d in a b; do
	check-sr-results.py --dir "$data/$d" --config "$data/when-all.yaml" \
		--identify "$identify" |& tee "$out"

	grep 'Identified as SystemReady IR v1.0' "$out"
	grep '0 warning, 2 error' "$out"
done

check-sr-results.py --dir "$data/ab" --config "$data/when-all.yaml" \
	--identify "$identify" |& tee "$out"

grep 'Identified as SystemReady IR v1.1' "$out"
grep '0 warning, 0 error' "$out"

echo -n 'warn if not named, ' >&3
check-sr-results.py --dir "$data/a" --config "$data/warn-if-not-named.yaml" \
	|& tee "$out"

re='WARNING .*not named in .*a'

if grep "$re" "$out"; then
	false
fi

grep ' 0 warning' "$out"

for d in b ab; do
	check-sr-results.py --dir "$data/$d" \
		--config "$data/warn-if-not-named.yaml" |& tee "$out"

	grep "$re" "$out"
	grep ' 1 warning' "$out"
done

echo -n 'dt error, ' >&3
check-sr-results.py --dir "$data/dt-error" |& tee "$out"
grep 'dt-parser error no schema' "$out"

echo -n 'image, ' >&3
img="$tmp/image.bin"
dd if=/dev/urandom of="$img" bs=123 count=1

echo -n 'certificate, ' >&3

openssl req -x509 -sha256 -newkey rsa:2048 -subj /CN=CRT/ \
	-keyout "$tmp/CRT.key" -out "$tmp/CRT.crt" -nodes -days 365

echo -n 'capsule, ' >&3
cap="$tmp/capsule1.bin"

mkeficapsule \
	--monotonic-count 1 \
	--private-key "$tmp/CRT.key" \
	--certificate "$tmp/CRT.crt" \
	--index 1 \
	--guid 058B7D83-50D5-4C47-A195-60D86AD341C4 \
	"$img" "$cap"

echo -n 'mockup, ' >&3
cp -r "$data/mockup" "$tmp/mockup"
mkdir -v "$tmp/mockup/fw"
cp -v "$cap" "$tmp/mockup/fw/"
check-sr-results.py --dir "$tmp/mockup" |& tee "$out"

grep 'Identified as SystemReady IR v2.0' "$out"

if grep ', 0 error' "$out"; then
	false
fi

grep 'FwResourceCount' "$out"
grep 'FwResourceCountMax' "$out"
grep ': GUID .* is known' "$out"
grep ': Capsule GUID .* is known' "$out"
dtb="$tmp/mockup/acs_results/uefi/BsaDevTree.dtb"
grep '/dev/null: Warning' "$dtb.log"
md="$tmp/mockup/acs_results/result.md"

if which parser.py; then
	echo -n '(parser), ' >&3
	grep '# SCT Summary' "$md"
else
	echo -n '(no parser), ' >&3
	test '!' -e "$md"
fi

# We continue using the mockup folder from previous steps.
echo -n 'deps regen, ' >&3
[ "$dtb.log" -nt "$dtb" ]
touch "$dtb"
[ "$dtb.log" -ot "$dtb" ]
ekl="$tmp/mockup/acs_results/sct_results/Overall/Summary.ekl"

if which parser.py; then
	[ "$md" -nt "$ekl" ]
fi

touch "$ekl"

if which parser.py; then
	[ "$md" -ot "$ekl" ]
fi

check-sr-results.py --dir "$tmp/mockup" |& tee "$out"
[ "$dtb.log" -nt "$dtb" ]

if which parser.py; then
	[ "$md" -nt "$ekl" ]
fi

# We continue using the mockup folder from previous step.
echo -n 'zero dt, ' >&3
dd if=/dev/zero of="$dtb" bs=1k count=1
check-sr-results.py --dir "$tmp/mockup" |& tee "$out"

grep 'dtc failed on ' "$out"
grep 'Could not find .* DT-VALIDATE' "$out"
grep 'FATAL ERROR: Blob has incorrect magic number' "$dtb.log"

# We continue using the mockup folder from previous steps.
echo -n 'unmatched guids, ' >&3
esrt="$tmp/mockup/acs_results/app_output/CapsuleApp_ESRT_table_info.log"
iconv -f UTF-16 "$esrt" |sed 's/60D86AD341C4/60D86AD341C5/' >"$tmp/bad-esrt"
iconv -t UTF-16 "$tmp/bad-esrt" >"$esrt"
check-sr-results.py --dir "$tmp/mockup" |& tee "$out"
grep 'GUID.* not in ESRT' "$out"

echo 'ok.' >&3
