#!/bin/bash
set -eu -o pipefail

# Unit test for check-sr-results.py.
# Usage: test-check-sr-results [keep]
# We keep our temporary folder when `keep' is specified.

# Redirect all output to a log in current folder.
# Keep stdout on fd 3.
bn=$(basename "$0")
log="$bn.log"
exec 3>&1 >"$log" 2>&1
set -x

echo -n 'Testing check-sr-results... ' >&3
trap 'echo "ERROR! (see $log)" >&3' ERR

# Make sure check-sr-results.py is in the path.
me=$(realpath "$0")
here="${me%/*}"
export PATH="$here/..:$PATH"

# Temporary folder.
if [ "${1:-unset}" == keep ]; then
	tmp=$(mktemp -d "$(basename "$0").XXX")
else
	tmp=$(mktemp -d)
	trap 'rm -fr "$tmp"' EXIT
fi

data="$here/data/$(basename "$0")"
out="$tmp/out"

echo -n 'none, ' >&3
check-sr-results.py

echo -n 'empty config, ' >&3
check-sr-results.py --config /dev/null

echo -n 'when any, ' >&3
identify="$here/../identify.py --identify-db $data/identify.yaml"

for d in a b; do
	check-sr-results.py --dir "$data/$d" --config "$data/when-any.yaml" \
		--identify "$identify" |& tee "$out"

	grep -q 'Identified as SystemReady IR v1.0' "$out"
	grep -q '0 warning, 0 error' "$out"
done

check-sr-results.py --dir "$data/ab" --config "$data/when-any.yaml" \
	--identify "$identify" |& tee "$out"

grep -q 'Identified as SystemReady IR v1.1' "$out"
grep -q '0 warning, 0 error' "$out"

echo -n 'when all, ' >&3
for d in a b; do
	check-sr-results.py --dir "$data/$d" --config "$data/when-all.yaml" \
		--identify "$identify" |& tee "$out"

	grep -q 'Identified as SystemReady IR v1.0' "$out"
	grep -q '0 warning, 2 error' "$out"
done

check-sr-results.py --dir "$data/ab" --config "$data/when-all.yaml" \
	--identify "$identify" |& tee "$out"

grep -q 'Identified as SystemReady IR v1.1' "$out"
grep -q '0 warning, 0 error' "$out"

echo -n 'image, ' >&3
img="$tmp/image.bin"
dd if=/dev/urandom of="$img" bs=123 count=1

echo -n 'certificate, ' >&3

openssl req -x509 -sha256 -newkey rsa:2048 -subj /CN=CRT/ \
	-keyout "$tmp/CRT.key" -out "$tmp/CRT.crt" -nodes -days 365

echo -n 'capsule, ' >&3
cap="$tmp/capsule1.bin"

mkeficapsule \
	--monotonic-count 1 \
	--private-key "$tmp/CRT.key" \
	--certificate "$tmp/CRT.crt" \
	--index 1 \
	--guid 058B7D83-50D5-4C47-A195-60D86AD341C4 \
	"$img" "$cap"

echo -n 'mockup, ' >&3
cp -r "$data/mockup" "$tmp/mockup"
mkdir -v "$tmp/mockup/fw"
cp -v "$cap" "$tmp/mockup/fw/"
check-sr-results.py --dir "$tmp/mockup" |& tee "$out"

grep -q 'Identified as SystemReady IR v2.0' "$out"
grep -qv ', 0 error' "$out"
grep -q 'FwResourceCount' "$out"
grep -q 'FwResourceCountMax' "$out"
grep -q ': GUID .* is known' "$out"
grep -q ': Capsule GUID .* is known' "$out"
grep -q '/dev/null: Warning' "$tmp/mockup/acs_results/uefi/BsaDevTree.dtb.log"

# We continue using the mockup folder from previous step.
echo -n 'zero dt, ' >&3
dd if=/dev/zero of="$tmp/mockup/acs_results/uefi/BsaDevTree.dtb" bs=1k count=1
check-sr-results.py --dir "$tmp/mockup" |& tee "$out"

grep -q 'dtc failed on ' "$out"
grep -q 'FATAL ERROR: Blob has incorrect magic number' "$tmp/mockup/acs_results/uefi/BsaDevTree.dtb.log"

echo 'ok.' >&3
